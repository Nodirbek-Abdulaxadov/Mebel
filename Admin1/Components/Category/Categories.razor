@page "/categories"
@using Admin1.Components.General
@inject ICategoryService categoryService
@inject IDialogService Dialog
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Categories</PageTitle>

<MudTable Items="@categories" Dense="true" 
          Hover="true" Bordered="true" FixedHeader="true"
          LoadingProgressColor="Color.Primary" Loading="@Loading"
          Striped="true" Filter="new Func<CategoryDto, bool>(FilterFunc1)"
          @bind-SelectedItem="selectedCategory">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Categories Table</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" 
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" OnClick="@((e) => OpenAddDialog())"
                   StartIcon="@Icons.Material.Filled.Add" Color="Color.Success">Add new</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled"
                           Color="Color.Primary" OnClick="@((e) => OpenEditPage(context.Id))" Size="Size.Small" Class="m-2" />
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" 
                           Color="Color.Error" OnClick="@((e) => OpenDeleteDialog(context.Id))" Size="Size.Small" Class="m-2" />
     </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @code {
    private string searchString = string.Empty;
    private List<CategoryDto> categories;
    private CategoryDto selectedCategory = null;
    private HashSet<CategoryDto> selectedCategories = new HashSet<CategoryDto>();
    private bool Loading = true;

    DialogOptions disableBackdropClick = new()
        {
            DisableBackdropClick = true,
            FullWidth = true,
            CloseButton = true
        };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();   
    }

    private bool FilterFunc1(CategoryDto element) => FilterFunc(element, searchString);

    private bool FilterFunc(CategoryDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async void OpenAddDialog()
    {
        var dialog = Dialog.Show<Add>("Add new category", disableBackdropClick);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async void OpenDeleteDialog(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", id);
        var dialog = Dialog.Show<YesNo>("Delete category", parameters, disableBackdropClick);
        var dialogResult = await dialog.Result;
        if (!dialogResult.Canceled)
        {
            var resul = await categoryService.DeleteAsync(id);
            if (resul.IsSuccess)
            {
                Snackbar.Add(resul.Message, Severity.Success);
                categories.Remove(categories.FirstOrDefault(x => x.Id == id));
                this.StateHasChanged();
            }
            else
            {
                Snackbar.Add(resul.Message, Severity.Error);
            }
        }
    }

    private void OpenEditPage(int id)
    {
        NavigationManager.NavigateTo($"/categories/edit/{id}");
    }

    private async Task LoadData()
    {
        Loading = true;
        this.StateHasChanged();
        var result = await categoryService.GetAllAsync();
        if (result.IsSuccess)
        {
            categories = result.Data;
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error);
        }
        Loading = false;
        this.StateHasChanged();
    }
}